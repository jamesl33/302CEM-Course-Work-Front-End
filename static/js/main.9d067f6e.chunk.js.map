{"version":3,"sources":["components/valueDisplay/valueDisplay.js","components/button/button.js","components/sensor/types/light/light.js","components/sensor/types/temperature/temperature.js","components/sensor/sensor.js","App.js","serviceWorker.js","index.js"],"names":["ValueDisplay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shortener","bind","assertThisInitialized","children","toString","length","newNumber","console","log","split","concat","react_default","a","createElement","className","css","Component","Button","handleButtonClick","handleCSS","event","stopPropagation","disabled","clickMethod","onClick","Light","determineCSS","components_button_button","decrementThreshold","valueDisplay_valueDisplay","threshold","incrementThreshold","parentCSS","prevProps","Temperature","minTempThreshold","maxTempThreshold","decrementMinTempThreshold","incrementMinTempThreshold","decrementMaxTempThreshold","incrementMaxTempThreshold","Sensor","state","setCSS","typeOfSensor","newCSS","setState","type","light_light","temperature_temperature","sensor","ip","App","socket","openSocket","light","value","temperature","minThreshold","maxThreshold","on","data","jsonData","JSON","parse","topic","newJSON","message","getLightThreshold","setLightThreshold","getMinTempThreshold","setMinTempThreshold","getMaxTempThreshold","setMaxTempThreshold","_this2","err","toast","error","messsage","_this3","_this4","_this5","_this6","_this7","callback","fetch","method","then","response","ok","json","Error","status","_context","t2","body","stringify","id","headers","content-type","_context2","t0","_context3","_context4","_context5","_context6","lib","position","components_sensor_sensor","_this8","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d067f6e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './valueDisplay.css'\n\n/** Class for displaying a single value for an incrementer, etc. */\nclass ValueDisplay extends Component {\n    constructor(props){\n\tsuper(props)\n\tthis.shortener = this.shortener.bind(this)\n    }\n    /**\n     * @description Function for shortening values above 10000 to use 'k'\n     */\n    shortener(){\n\tif(this.props.children.toString().length > 4){\n\t    let newNumber = this.props.children / 1000\n\t    console.log(newNumber)\n\t    newNumber = newNumber.toString().split('.',1)\n\t    return `${newNumber}k`\n\t} else {\n\t    return this.props.children\n\t}\n    }\n    render() {\n\treturn(\n\t\t<div className={`valueDisplay ${this.props.css}`}>\n\t\t{this.shortener()}\n\t\t</div>\n\t)\n    }\n}\n\nexport default ValueDisplay\n","import React, { Component } from 'react'\nimport './button.css'\n\n/** Class for using divs as a button (much easier to use for CSS */\nclass Button extends Component{\n    constructor(props){\n\tsuper(props)\n\tthis.handleButtonClick = this.handleButtonClick.bind(this)\n\tthis.handleCSS = this.handleCSS.bind(this)\n    }\n    /**\n     * @description Function for handling the event of clicking the button. Prevents propagation to higher order divs or when disabled\n     */\n    handleButtonClick(event){\n\tevent.stopPropagation()\n\tif(!this.props.disabled){\n\t    this.props.clickMethod()\n\t}\n    }\n    /**\n     * @description Function for determining what CSS classes to use for the button\n     */\n    handleCSS(){\n\tif(this.props.children === '+'){\n\t    return 'green'\n\t} else if(this.props.children === '-'){\n\t    return 'red'\n\t}\n    }\n    render(){\n\tlet css = this.handleCSS()\n\treturn(\n\t\t<div onClick={this.handleButtonClick} className={`btn-wrapper ${css}`}>\n\t\t{this.props.children}\n\t    </div>\n\t)\n    }\n}\n\nexport default Button\n","import React, { Component } from 'react'\nimport ValueDisplay from '../../../valueDisplay/valueDisplay'\nimport Button from '../../../button/button'\nimport './light.css'\n\n/** Class for handling the light sensor */\nclass Light extends Component {\n    constructor(props){\n\tsuper(props)\n\tthis.shortener = this.shortener.bind(this)\n\tthis.determineCSS = this.determineCSS.bind(this)\n    }\n    /**\n     * @description Function for shortening large values (over 9999)\n     */\n    shortener(){\n\tif(this.props.children.toString().length > 4){\n\t    let newNumber = this.props.children / 1000\n\t    console.log(newNumber)\n\t    newNumber = newNumber.toString().split('.',1)\n\t    return `${newNumber}k`\n\t} else {\n\t    return this.props.children\n\t}\n    }\n    /**\n     * @description Function for determining what CSS class to use\n     */\n    determineCSS(){\n\tif(this.props.children < 500000){\n\t    return 'dark'\n\t} else {\n\t    return 'light'\n\t}\n    }\n    render(){\n\treturn(\n\t\t<div>\n\t\t<h1 className={`data ${this.props.css}`}>{this.shortener()}</h1>\n\t\t<h3 className={this.props.css}>Activation Threshold</h3>\n\t\t<div className='adjuster'>\n\t\t<Button clickMethod={this.props.decrementThreshold} disabled={false}>-</Button>\n\t\t<ValueDisplay css={this.props.css}>{this.props.threshold}</ValueDisplay>\n\t\t<Button clickMethod={this.props.incrementThreshold} disabled={false}>+</Button>\n\t\t</div>\n\t\t</div>\n\t)\n    }\n    componentDidMount(){\n\t/** Important: You MUST set the parent CSS on mount, otherwise CSS will be borked for the sensor */\n\tthis.props.parentCSS(this.determineCSS())\n    }\n    componentDidUpdate(prevProps){\n\t/** Update the css when the data value changes. MUST be conditional, otherwise you'll be stuck in infinite updates */\n\tif(this.props.children !== prevProps.children){\n\t    this.props.parentCSS(this.determineCSS())\n\t}\n    }\n}\n\nexport default Light\n","import React, { Component } from 'react'\nimport ValueDisplay from '../../../valueDisplay/valueDisplay'\nimport Button from '../../../button/button'\nimport './temperature.css'\n\n/** Class for handling the light sensor */\nclass Temperature extends Component {\n    constructor(props){\n\tsuper(props)\n\tthis.determineCSS = this.determineCSS.bind(this)\n    }\n    /**\n     * @description Function for determining what CSS class to use\n     */\n    determineCSS(){\n\tif(this.props.children < this.props.minTempThreshold){\n\t    return 'cold'\n\t} else if(this.props.children > this.props.maxTempThreshold){\n\t    return 'hot'\n\t} else {\n\t    return 'good'\n\t}\n    }\n    render(){\n\treturn(\n\t\t<div>\n\t\t<h1 className={`data ${this.props.css}`}>{`${this.props.children} C`}</h1>\n\t\t<h3 className={this.props.css}>Minimum Temperature</h3>\n\t\t<div className='adjuster'>\n\t\t<Button clickMethod={this.props.decrementMinTempThreshold} disabled={false}>-</Button>\n\t\t<ValueDisplay css={this.props.css}>{this.props.minTempThreshold}</ValueDisplay>\n\t\t<Button clickMethod={this.props.incrementMinTempThreshold} disabled={false}>+</Button>\n\t\t</div>\n\t\t<h3 className={this.props.css}>Maximum Temperature</h3>\n\t\t<div className='adjuster'>\n\t\t<Button clickMethod={this.props.decrementMaxTempThreshold} disabled={false}>-</Button>\n\t\t<ValueDisplay css={this.props.css}>{this.props.maxTempThreshold}</ValueDisplay>\n\t\t<Button clickMethod={this.props.incrementMaxTempThreshold} disabled={false}>+</Button>\n\t\t</div>\n\t\t</div>\n\t)\n    }\n    componentDidMount(){\n\t/** Important: You MUST set the parent CSS on mount, otherwise CSS will be borked for the sensor */\n\tthis.props.parentCSS(this.determineCSS())\n    }\n    componentDidUpdate(prevProps){\n\t/** Update the css when the data value changes. MUST be conditional, otherwise you'll be stuck in infinite updates */\n\tif(this.props.children !== prevProps.children){\n\t    this.props.parentCSS(this.determineCSS())\n\t}\n    }\n}\n\nexport default Temperature\n","import React, { Component } from 'react'\nimport './sensor.css'\nimport Light from './types/light/light'\nimport Temperature from './types/temperature/temperature'\n\n/** Class for creating the actual sensor box with Heading and 'Content', where content is determined by a separate class (e.g. Light) */\nclass Sensor extends Component {\n    constructor(props){\n\tsuper(props)\n\t/* The CSS for the sensor (e.g. background colour) must be handled\n         * here and then passed onto the content box for use. Pass functions\n         * to the 'Content' classes that manipulate this state\n         */\n\tthis.state = {\n\t    css: \"\"\n\t}\n\tthis.setCSS = this.setCSS.bind(this)\n\tthis.typeOfSensor = this.typeOfSensor.bind(this)\n    }\n    /**\n     * @description Function for setting the CSS state from a child Content class\n     */\n    setCSS(newCSS){\n\tthis.setState({css: newCSS})\n    }\n    /**\n     * @description Function for determining the type of sensor to use based on props given to it. You MUST pass setCSS to the child somehow, otherwhise CSS will bork out\n     */\n    typeOfSensor(){\n\tif(this.props.type === 'Light'){\n\t    return(\n\t\t    <div>\n\t\t    <Light parentCSS={this.setCSS} css={this.state.css} threshold={this.props.threshold} incrementThreshold={this.props.incrementThreshold} decrementThreshold={this.props.decrementThreshold}>{this.props.children}</Light>\n\t\t    </div>\n\t    )\n\t}\n\tif(this.props.type === 'Temperature'){\n\t    return(\n\t\t<div>\n\t\t    <Temperature parentCSS={this.setCSS} css={this.state.css} minTempThreshold={this.props.minTempThreshold} maxTempThreshold={this.props.maxTempThreshold} incrementMinTempThreshold={this.props.incrementMinTempThreshold} decrementMinTempThreshold={this.props.decrementMinTempThreshold} incrementMaxTempThreshold={this.props.incrementMaxTempThreshold} decrementMaxTempThreshold={this.props.decrementMaxTempThreshold}>{this.props.children}</Temperature>\n\t\t    </div>\n\t    )\n\t}\n    }\n    render() {\n\tlet sensor = this.typeOfSensor()\n\treturn(\n\t\t<div className={`sensor ${this.props.type} ${this.state.css}`}>\n\t\t<h2 className={`header ${this.state.css}`}>{this.props.type}</h2>\n\t\t{sensor}\n\t\t</div>\n\t)\n    }\n}\n\nexport default Sensor\n","import React, { Component } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css'\nimport Sensor from './components/sensor/sensor'\nimport openSocket from 'socket.io-client'\n\nconst ip = \"https://agiledevbear.ddns.net:8080\"\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n\n\t/* Initialise the state of the App */\n        this.state = {\n            socket: openSocket(ip),\n            light: {\n                value: 0,\n                threshold: 10000,\n            },\n\t    temperature: {\n\t\tvalue: 20.00,\n\t\tminThreshold: 16.00,\n\t\tmaxThreshold: 24.00\n\t    }\n        }\n\n\t/* Tunnel functionality. Handle MQTT data in here */\n        this.state.socket.on('tunnel', data => {\n\t    let jsonData = JSON.parse(data)\n\t    if(jsonData.topic === '302CEM/bear/sensor_0/light_1'){\n\t\tlet newJSON = this.state.light\n\t\tnewJSON.value = jsonData.message\n\t\tthis.setState({light: newJSON})\n\t    }\n\t    if(jsonData.topic === '302CEM/bear/sensor_0/temperature_0'){\n\t\tlet newJSON = this.state.temperature\n\t\tnewJSON.value = jsonData.message\n\t\tthis.setState({temperature: newJSON})\n\t    }\n\t})\n\n\t/* Function binds */\n\tthis.incrementThreshold = this.incrementThreshold.bind(this)\n\tthis.decrementThreshold = this.decrementThreshold.bind(this)\n\tthis.incrementMinTempThreshold = this.incrementMinTempThreshold.bind(this)\n\tthis.decrementMinTempThreshold = this.decrementMinTempThreshold.bind(this)\n\tthis.incrementMaxTempThreshold = this.incrementMaxTempThreshold.bind(this)\n\tthis.decrementMaxTempThreshold = this.decrementMaxTempThreshold.bind(this)\n        this.getLightThreshold = this.getLightThreshold.bind(this)\n        this.setLightThreshold = this.setLightThreshold.bind(this)\n\tthis.getMinTempThreshold = this.getMinTempThreshold.bind(this)\n        this.setMinTempThreshold = this.setMinTempThreshold.bind(this)\n\tthis.getMaxTempThreshold = this.getMaxTempThreshold.bind(this)\n        this.setMaxTempThreshold = this.setMaxTempThreshold.bind(this)\n    }\n    incrementThreshold(){\n\t/**\n         * @description Increment the current light threshold by 1000\n         */\n\tlet newJSON = this.state.light\n\tnewJSON.threshold = newJSON.threshold + 1000\n        this.setLightThreshold(newJSON.threshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n\t\tconsole.log(err.messsage)\n            } else {\n                this.setState({light: newJSON})\n            }\n        })\n    }\n    decrementThreshold(){\n\t/**\n         * @description Decrement the current light threshold by 1000\n         */\n\tlet newJSON = this.state.light\n\tnewJSON.threshold = newJSON.threshold - 1000\n        this.setLightThreshold(newJSON.threshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({light: newJSON})\n            }\n        })\n    }\n    incrementMinTempThreshold(){\n\t/**\n         * @description Increment the current min temp threshold by 0.5\n         */\n\tlet newJSON = this.state.temperature\n\tnewJSON.minThreshold = newJSON.minThreshold + 0.5\n        this.setMinTempThreshold(newJSON.minThreshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({temperature: newJSON})\n            }\n        })\n    }\n    decrementMinTempThreshold(){\n\t/**\n         * @description Decrement the current min temp threshold by 0.5\n         */\n\tlet newJSON = this.state.temperature\n\tnewJSON.minThreshold = newJSON.minThreshold - 0.5\n        this.setMinTempThreshold(newJSON.minThreshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({temperature: newJSON})\n            }\n        })\n    }\n    incrementMaxTempThreshold(){\n\t/**\n         * @description Increment the current max temp threshold by 0.5\n         */\n\tlet newJSON = this.state.temperature\n\tnewJSON.maxThreshold = newJSON.maxThreshold + 0.5\n        this.setMaxTempThreshold(newJSON.maxThreshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({temperature: newJSON})\n            }\n        })\n    }\n    decrementMaxTempThreshold(){\n\t/**\n         * @description Decrement the current max temp threshold by 0.5\n         */\n\tlet newJSON = this.state.temperature\n\tnewJSON.maxThreshold = newJSON.maxThreshold - 0.5\n        this.setMaxTempThreshold(newJSON.maxThreshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({temperature: newJSON})\n            }\n        })\n    }\n    /**\n     * @description Get the current light threshold value from the api\n     * @param {Function} callback - Callback with the signature (err, threshold)\n     */\n    async getLightThreshold(callback) {\n        try {\n            callback(null, await fetch(`${ip}/api/sensors/light/threshold?id=0`, {\n                method: 'get'\n            }).then(response => {\n\t\tif(response.ok){\n\t\t    console.log(response)\n                    return response.json()\n\t\t}\n\t\tthrow new Error(`Network response was not ok, status code: ${response.status}`)\n            }).then(json => {\n                return json.threshold\n            }))\n        } catch (err) {\n            callback(err)\n        }\n    }\n    \n    /**\n     * @description Set a new light threshold value using the api\n     * @param {Integer} threshold - The new threshold value\n     * @param {Function} callback - Callback with the signature (err)\n     */\n    async setLightThreshold(threshold, callback) {\n        try {\n            await fetch(`${ip}/api/sensors/light/threshold`, {\n                body: JSON.stringify({\n                    id: 0,\n                    threshold: threshold\n                }),\n                headers: {'content-type': 'application/json'},\n                method: 'post'\n            }).then(response => {\n\t\tif(!response.ok){\n\t\t    throw new Error(`Network response was not ok, status code: ${response.status}`)\n\t\t}\n\t    })\n            callback(null)\n        } catch (err) {\n            callback(err)\n        }\n    }\n    /**\n     * @description Get the current min temp threshold value from the api\n     * @param {Function} callback - Callback with the signature (err, threshold)\n     */\n    async getMinTempThreshold(callback) {\n        try {\n            callback(null, await fetch(`${ip}/api/sensors/temperature/threshold/min?id=1`, {\n                method: 'get'\n            }).then(response => {\n\t\tif(response.ok){\n\t\t    console.log(response)\n                    return response.json()\n\t\t}\n\t\tthrow new Error(`Network response was not ok, status code: ${response.status}`)\n            }).then(json => {\n                return json.threshold\n            }))\n        } catch (err) {\n            callback(err)\n        }\n    }\n    \n    /**\n     * @description Set a new min temp threshold value using the api\n     * @param {Integer} threshold - The new threshold value\n     * @param {Function} callback - Callback with the signature (err)\n     */\n    async setMinTempThreshold(threshold, callback) {\n        try {\n            await fetch(`${ip}/api/sensors/temperature/threshold/min`, {\n                body: JSON.stringify({\n                    id: 0,\n                    threshold: threshold\n                }),\n                headers: {'content-type': 'application/json'},\n                method: 'post'\n            }).then(response => {\n\t\tif(!response.ok){\n\t\t    throw new Error(`Network response was not ok, status code: ${response.status}`)\n\t\t}\n\t    })\n            callback(null)\n        } catch (err) {\n\t    console.log(err)\n            callback(err)\n        }\n    }\n    /**\n     * @description Get the current max temp threshold value from the api\n     * @param {Function} callback - Callback with the signature (err, threshold)\n     */\n    async getMaxTempThreshold(callback) {\n        try {\n            callback(null, await fetch(`${ip}/api/sensors/temperature/threshold/max?id=1`, {\n                method: 'get'\n            }).then(response => {\n\t\tif(response.ok){\n                    return response.json()\n\t\t}\n\t\tthrow new Error(`Network response was not ok, status code: ${response.status}`)\n            }).then(json => {\n                return json.threshold\n            }))\n        } catch (err) {\n            callback(err)\n        }\n    }\n    \n    /**\n     * @description Set a new max temp threshold value using the api\n     * @param {Integer} threshold - The new threshold value\n     * @param {Function} callback - Callback with the signature (err)\n     */\n    async setMaxTempThreshold(threshold, callback) {\n        try {\n            await fetch(`${ip}/api/sensors/temperature/threshold/max`, {\n                body: JSON.stringify({\n                    id: 1,\n                    threshold: threshold\n                }),\n                headers: {'content-type': 'application/json'},\n                method: 'post'\n            }).then(response => {\n\t\tif(!response.ok){\n\t\t    throw new Error(`Network response was not ok, status code: ${response.status}`)\n\t\t}\n\t    })\n            callback(null)\n        } catch (err) {\n            callback(err)\n        }\n    }\n    render() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t<ToastContainer position=\"top-center\" />\n\t\t<div className=\"sensorArray\">\n\t\t<Sensor type=\"Light\" threshold={this.state.light.threshold} incrementThreshold={this.incrementThreshold} decrementThreshold={this.decrementThreshold}>{this.state.light.value}</Sensor>\n\t\t<Sensor type=\"Temperature\" minTempThreshold={this.state.temperature.minThreshold} maxTempThreshold={this.state.temperature.maxThreshold} incrementMinTempThreshold={this.incrementMinTempThreshold} decrementMinTempThreshold={this.decrementMinTempThreshold} incrementMaxTempThreshold={this.incrementMaxTempThreshold} decrementMaxTempThreshold={this.decrementMaxTempThreshold}>{this.state.temperature.value}</Sensor>\n\t\t</div>\n\t\t</div>\n\t)\n    }\n    componentDidMount(){\n\t/* Any initialization functions that request from the Remote API (e.g. getLightThreshold) MUST be called in here and NOT at render */\n\tthis.getLightThreshold((err, threshold) => {\n\t    if(err){\n\t\ttoast.error(err.message)\n\t    } else {\n\t\tconsole.log(threshold)\n\t\tlet newJSON = this.state.light\n\t\tnewJSON.threshold = threshold\n\t\tthis.setState({light: newJSON})\n\t    }\n\t})\n\tthis.getMinTempThreshold((err, threshold) => {\n\t    if(err){\n\t\ttoast.error(err.message)\n\t    } else {\n\t\tconsole.log(threshold)\n\t\tlet newJSON = this.state.temperature\n\t\tnewJSON.minThreshold = threshold\n\t\tthis.setState({temperature: newJSON})\n\t    }\n\t})\n\tthis.getMaxTempThreshold((err, threshold) => {\n\t    if(err){\n\t\ttoast.error(err.message)\n\t    } else {\n\t\tconsole.log(threshold)\n\t\tlet newJSON = this.state.temperature\n\t\tnewJSON.maxThreshold = threshold\n\t\tthis.setState({temperature: newJSON})\n\t    }\n\t})\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}