{"version":3,"sources":["components/valueDisplay/valueDisplay.js","components/button/button.js","components/sensor/types/light/light.js","components/sensor/graphs/graphLight/graphLight.js","components/sensor/graphs/graphTemperature/graphTemperature.js","components/sensor/types/temperature/temperature.js","components/sensor/sensor.js","App.js","serviceWorker.js","index.js"],"names":["ValueDisplay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shortener","bind","assertThisInitialized","children","toString","length","newNumber","split","concat","react_default","a","createElement","className","css","Component","Button","handleButtonClick","handleCSS","event","stopPropagation","disabled","clickMethod","onClick","Light","determineCSS","components_button_button","decrementThreshold","valueDisplay_valueDisplay","threshold","incrementThreshold","parentCSS","prevProps","GraphLight","state","chartData","TimeSeries","name","columns","points","Date","failed","handleModalExitClick","handleModalContentClick","onModalExitClick","entry","timeRange","range","title","titleStyle","fill","fontWeight","id","label","min","max","axis","series","_this2","getHistory","err","history","toast","error","message","setState","map","item","timestamp","value","GraphTemperature","timerange","format","Temperature","minTempThreshold","maxTempThreshold","decrementMinTempThreshold","incrementMinTempThreshold","decrementMaxTempThreshold","incrementMaxTempThreshold","Sensor","modal","setCSS","displayModal","typeOfSensor","modalOn","newCSS","type","graphLight_graphLight","graphTemperature_graphTemperature","light_light","temperature_temperature","ip","App","socket","openSocket","light","temperature","minThreshold","maxThreshold","on","data","jsonData","JSON","parse","topic","newJSON","getLightThreshold","setLightThreshold","getMinTempThreshold","setMinTempThreshold","getMaxTempThreshold","setMaxTempThreshold","_this3","_this4","_this5","_this6","_this7","callback","fetch","method","response","json","ok","console","log","Error","_context","t0","_context2","body","stringify","headers","content-type","_context3","_context4","_context5","_context6","_context7","lib","position","sensor_sensor","_this8","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9fafe1b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './valueDisplay.css'\n\n/** Class for displaying a single value for an incrementer, etc. */\nclass ValueDisplay extends Component {\n    constructor(props){\n\tsuper(props)\n\tthis.shortener = this.shortener.bind(this)\n    }\n    /**\n     * @description Function for shortening values above 10000 to use 'k'\n     */\n    shortener(){\n\tif(this.props.children.toString().length > 4){\n\t    let newNumber = this.props.children / 1000\n\t    newNumber = newNumber.toString().split('.',1)\n\t    return `${newNumber}k`\n\t} else {\n\t    return this.props.children\n\t}\n    }\n    render() {\n\treturn(\n\t\t<div className={`valueDisplay ${this.props.css}`}>\n\t\t{this.shortener()}\n\t\t</div>\n\t)\n    }\n}\n\nexport default ValueDisplay\n","import React, { Component } from 'react'\nimport './button.css'\n\n/** Class for using divs as a button (much easier to use for CSS */\nclass Button extends Component{\n    constructor(props){\n\tsuper(props)\n\tthis.handleButtonClick = this.handleButtonClick.bind(this)\n\tthis.handleCSS = this.handleCSS.bind(this)\n    }\n    /**\n     * @description Function for handling the event of clicking the button. Prevents propagation to higher order divs or when disabled\n     */\n    handleButtonClick(event){\n\tevent.stopPropagation()\n\tif(!this.props.disabled){\n\t    this.props.clickMethod()\n\t}\n    }\n    /**\n     * @description Function for determining what CSS classes to use for the button\n     */\n    handleCSS(){\n\tif(this.props.children === '-'){\n\t    return 'red'\n\t} else {\n\t    return 'green'\n\t}\n    }\n    render(){\n\tlet css = this.handleCSS()\n\treturn(\n\t\t<div onClick={this.handleButtonClick} className={`btn-wrapper ${css}`}>\n\t\t{this.props.children}\n\t    </div>\n\t)\n    }\n}\n\nexport default Button\n","import React, { Component } from 'react'\nimport ValueDisplay from '../../../valueDisplay/valueDisplay'\nimport Button from '../../../button/button'\nimport './light.css'\n\n/** Class for handling the light sensor */\nclass Light extends Component {\n    constructor(props){\n\tsuper(props)\n\tthis.shortener = this.shortener.bind(this)\n\tthis.determineCSS = this.determineCSS.bind(this)\n    }\n    /**\n     * @description Function for shortening large values (over 9999)\n     */\n    shortener(){\n\tif(this.props.children.toString().length > 4){\n\t    let newNumber = this.props.children / 1000\n\t    newNumber = newNumber.toString().split('.',1)\n\t    return `${newNumber}k`\n\t} else {\n\t    return this.props.children\n\t}\n    }\n    /**\n     * @description Function for determining what CSS class to use\n     */\n    determineCSS(){\n\tif(this.props.children < 24){\n\t    return 'dark'\n\t} else {\n\t    return 'light'\n\t}\n    }\n    render(){\n\treturn(\n\t\t<div>\n\t\t<h1 className={`data ${this.props.css}`}>{this.shortener()}</h1>\n\t\t<h3 className={this.props.css}>Activation Threshold</h3>\n\t\t<div className='adjuster'>\n\t\t<Button clickMethod={this.props.decrementThreshold} disabled={false}>-</Button>\n\t\t<ValueDisplay css={this.props.css}>{this.props.threshold}</ValueDisplay>\n\t\t<Button clickMethod={this.props.incrementThreshold} disabled={false}>+</Button>\n\t\t</div>\n\t\t</div>\n\t)\n    }\n    componentDidMount(){\n\t/** Important: You MUST set the parent CSS on mount, otherwise CSS will be borked for the sensor */\n\tthis.props.parentCSS(this.determineCSS())\n    }\n    componentDidUpdate(prevProps){\n\t/** Update the css when the data value changes. MUST be conditional, otherwise you'll be stuck in infinite updates */\n\tif(this.props.children !== prevProps.children){\n\t    this.props.parentCSS(this.determineCSS())\n\t}\n    }\n}\n\nexport default Light\n","import React, { Component } from 'react'\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from 'react-timeseries-charts'\nimport { TimeSeries } from 'pondjs'\nimport { toast } from 'react-toastify'\nimport '../modal.css'\nimport './graphLight.css'\n\nclass GraphLight extends Component {\n    constructor(props){\n\tsuper(props)\n\tthis.state = {\n\t    chartData: new TimeSeries({\n                name: \"Historical Light\",\n                columns: [\"time\", \"light\"],\n                points: [[new Date(), 0]]\n\t    }),\n\t    failed: false\n\t}\n\tthis.handleModalExitClick = this.handleModalExitClick.bind(this)\n\tthis.handleModalContentClick = this.handleModalContentClick.bind(this)\n    }\n    handleModalExitClick(event){\n\tthis.props.onModalExitClick()\n    }\n    handleModalContentClick(event){\n\tevent.stopPropagation()\n\treturn null\n    }\n    render(){\n        // Style was not being used, commented to get rid of warnings\n\t// const style = {\n\t//     light: {\n\t// \tstroke: \"#A02C2C\",\n\t// \topacity: 0.2\n\t//     }\n\t// }\n\tif(!this.state.failed){\n\t    return (\n\t\t    <div className=\"modal\" onClick={this.handleModalExitClick}>\n\t\t    <div className=\"modalContent\" onClick={this.handleModalContentClick}>\n\n\t\t    <ChartContainer timeRange={this.state.chartData.range()} title=\"Historical Light Level\" titleStyle={{ fill: \"#555\", fontWeight: 500}}>\n\t\t    <ChartRow>\n\t\t    <YAxis id=\"light\" label=\"Light Level\" min={this.state.chartData.min(\"light\")} max={this.state.chartData.max(\"light\")}/>\n\t\t    <Charts>\n\t\t    <LineChart axis=\"light\" series={this.state.chartData} columns={[\"light\"]}/>\n\t\t    </Charts>\n\t\t    </ChartRow>\n\t\t    </ChartContainer>\n\n\t\t    </div>\n\t\t    </div>\n\t    )\n\t} else {\n\t    return (\n\t\t    <div className=\"modal\" onClick={this.handleModalExitClick}>\n\t\t    <div className=\"modalContent\" onClick={this.handleModalContentClick}>\n\t\t    <h2 className=\"modalText\">Could not load graph, try again later</h2>\n\t\t    </div>\n\t\t    </div>\n\t    )\n\t}\n    }\n    componentDidMount() {\n        this.props.getHistory('light', (err, history) => {\n            if (err) {\n                toast.error(err.message)\n                this.setState({failed: true})\n            } else {\n                this.setState({\n                    chartData: new TimeSeries({\n                        name: \"Historical Light\",\n                        columns: [\"time\", \"light\"],\n                        points: history.map(item => {\n                            return [new Date(item.timestamp), item.value]\n                        })\n                    })\n                })\n            }\n        })\n    }\n}\n\nexport default GraphLight\n","import React, { Component } from 'react'\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from 'react-timeseries-charts'\nimport { TimeSeries } from 'pondjs'\nimport { toast } from 'react-toastify'\nimport '../modal.css'\nimport './graphTemperature.css'\n\nclass GraphTemperature extends Component {\n    constructor(props){\n\tsuper(props)\n\tthis.state = {\n\t    chartData: new TimeSeries({\n                name: \"Historical Temperatures\",\n                columns: [\"time\", \"temperature\"],\n                points: [[new Date(), 0]]\n\t    }),\n\t    failed: false\n\t}\n\tthis.handleModalExitClick = this.handleModalExitClick.bind(this)\n\tthis.handleModalContentClick = this.handleModalContentClick.bind(this)\n    }\n    handleModalExitClick(event){\n\tthis.props.onModalExitClick()\n    }\n    handleModalContentClick(event){\n\tevent.stopPropagation()\n\treturn null\n    }\n    render(){\n        // Style was not being used, commented to get rid of warnings\n\t// const style = {\n\t//     temperature: {\n\t// \tstroke: \"#A02C2C\",\n\t// \topacity: 0.2\n\t//     }\n\t// }\n\tif(!this.state.failed){\n\t    return (\n\t\t    <div className=\"modal\" onClick={this.handleModalExitClick}>\n\t\t    <div className=\"modalContent\" onClick={this.handleModalContentClick}>\n\n\t\t    <ChartContainer timeRange={this.state.chartData.timerange()} title=\"Historical Temperature Level\" titleStyle={{ fill: \"#555\", fontWeight: 500 }}>\n\t\t    <ChartRow>\n\t\t    <YAxis id=\"temperature\" label=\"Temperature, C\" min={this.state.chartData.min(\"temperature\")} max={this.state.chartData.max(\"temperature\")} format=\".2f\"/>\n\t\t    <Charts>\n\t\t    <LineChart axis=\"temperature\" series={this.state.chartData} columns={[\"temperature\"]} />\n\t\t    </Charts>\n\t\t    </ChartRow>\n\t\t    </ChartContainer>\n\n\t\t    </div>\n\t\t    </div>\n\t    )\n\t} else {\n\t    return (\n\t\t    <div className=\"modal\" onClick={this.handleModalExitClick}>\n\t\t    <div className=\"modalContent\" onClick={this.handleModalContentClick}>\n\t\t    <h2 className=\"modalText\">Could not load graph, try again later</h2>\n\t\t    </div>\n\t\t    </div>\n\t    )\n\t}\n    }\n    componentDidMount() {\n        this.props.getHistory('temperature', (err, history) => {\n            if (err) {\n                toast.error(err.message)\n                this.setState({failed: true})\n            } else {\n                this.setState({\n                    chartData: new TimeSeries({\n                        name: \"Historical Temperature\",\n                        columns: [\"time\", \"temperature\"],\n                        points: history.map(item => {\n                            return [new Date(item.timestamp), item.value]\n                        })\n                    })\n                })\n            }\n        })\n    }\n}\n\nexport default GraphTemperature\n","import React, { Component } from 'react'\nimport ValueDisplay from '../../../valueDisplay/valueDisplay'\nimport Button from '../../../button/button'\nimport './temperature.css'\n\n/** Class for handling the light sensor */\nclass Temperature extends Component {\n    constructor(props){\n\tsuper(props)\n\tthis.determineCSS = this.determineCSS.bind(this)\n    }\n    /**\n     * @description Function for determining what CSS class to use\n     */\n    determineCSS(){\n\tif(this.props.children < this.props.minTempThreshold){\n\t    return 'cold'\n\t} else if(this.props.children > this.props.maxTempThreshold){\n\t    return 'hot'\n\t} else {\n\t    return 'good'\n\t}\n    }\n    render(){\n\treturn(\n\t\t<div>\n\t\t<h1 className={`data ${this.props.css}`}>{`${this.props.children} C`}</h1>\n\t\t<h3 className={this.props.css}>Minimum Temperature</h3>\n\t\t<div className='adjuster'>\n\t\t<Button clickMethod={this.props.decrementMinTempThreshold} disabled={false}>-</Button>\n\t\t<ValueDisplay css={this.props.css}>{this.props.minTempThreshold}</ValueDisplay>\n\t\t<Button clickMethod={this.props.incrementMinTempThreshold} disabled={false}>+</Button>\n\t\t</div>\n\t\t<h3 className={this.props.css}>Maximum Temperature</h3>\n\t\t<div className='adjuster'>\n\t\t<Button clickMethod={this.props.decrementMaxTempThreshold} disabled={false}>-</Button>\n\t\t<ValueDisplay css={this.props.css}>{this.props.maxTempThreshold}</ValueDisplay>\n\t\t<Button clickMethod={this.props.incrementMaxTempThreshold} disabled={false}>+</Button>\n\t\t</div>\n\t\t</div>\n\t)\n    }\n    componentDidMount(){\n\t/** Important: You MUST set the parent CSS on mount, otherwise CSS will be borked for the sensor */\n\tthis.props.parentCSS(this.determineCSS())\n    }\n    componentDidUpdate(prevProps){\n\t/** Update the css when the data value changes. MUST be conditional, otherwise you'll be stuck in infinite updates */\n\tif(this.props.children !== prevProps.children){\n\t    this.props.parentCSS(this.determineCSS())\n\t}\n    }\n}\n\nexport default Temperature\n","import React, { Component } from 'react'\nimport './sensor.css'\nimport Light from './types/light/light'\nimport GraphLight from './graphs/graphLight/graphLight'\nimport GraphTemperature from './graphs/graphTemperature/graphTemperature'\nimport Temperature from './types/temperature/temperature'\nimport Button from '../button/button'\n\n/** Class for creating the actual sensor box with Heading and 'Content', where content is determined by a separate class (e.g. Light) */\nclass Sensor extends Component {\n    constructor(props){\n\tsuper(props)\n\t/* The CSS for the sensor (e.g. background colour) must be handled\n         * here and then passed onto the content box for use. Pass functions\n         * to the 'Content' classes that manipulate this state\n         */\n\tthis.state = {\n\t    css: \"\",\n\t    modal: false,\n\t}\n\tthis.setCSS = this.setCSS.bind(this)\n\tthis.displayModal = this.displayModal.bind(this)\n\tthis.typeOfSensor = this.typeOfSensor.bind(this)\n\tthis.onModalExitClick = this.onModalExitClick.bind(this)\n\tthis.modalOn = this.modalOn.bind(this)\n    }\n    /**\n     * @description Function for setting the CSS state from a child Content class\n     */\n    setCSS(newCSS){\n\tthis.setState({css: newCSS})\n    }\n    /**\n     * @description Function for getting a modal depending upon the state\n     */\n    displayModal(){\n\tif(this.state.modal){\n\t    if(this.props.type === 'Light'){\n\t\treturn(\n\t\t\t<div>\n\t\t\t<GraphLight onModalExitClick={this.onModalExitClick} getHistory={this.props.getHistory}/>\n\t\t\t</div>\n\t\t)\n\t    } else {\n\t\treturn(\n\t\t\t<div>\n\t\t\t<GraphTemperature onModalExitClick={this.onModalExitClick} getHistory={this.props.getHistory}/>\n\t\t\t</div>\n\t\t)\n\t    }\n\t}\n\treturn(null)\n    }\n    onModalExitClick(){\n\tthis.setState({modal: false})\n    }\n    modalOn(){\n\tthis.setState({modal: true})\n    }\n    /**\n     * @description Function for determining the type of sensor to use based on props given to it. You MUST pass setCSS to the child somehow, otherwhise CSS will bork out\n     */\n    typeOfSensor(){\n\tif(this.props.type === 'Light'){\n\t    return(\n\t\t    <div>\n\t\t    <Light parentCSS={this.setCSS} css={this.state.css} threshold={this.props.threshold} incrementThreshold={this.props.incrementThreshold} decrementThreshold={this.props.decrementThreshold}>{this.props.children}</Light>\n\t\t    </div>\n\t    )\n\t}\n\tif(this.props.type === 'Temperature'){\n\t    return(\n\t\t    <div>\n\t\t    <Temperature parentCSS={this.setCSS} css={this.state.css} minTempThreshold={this.props.minTempThreshold} maxTempThreshold={this.props.maxTempThreshold} incrementMinTempThreshold={this.props.incrementMinTempThreshold} decrementMinTempThreshold={this.props.decrementMinTempThreshold} incrementMaxTempThreshold={this.props.incrementMaxTempThreshold} decrementMaxTempThreshold={this.props.decrementMaxTempThreshold}>{this.props.children}</Temperature>\n\t\t    </div>\n\t    )\n\t}\n    }\n    render() {\n\treturn(\n\t\t<div className={`sensor ${this.props.type} ${this.state.css}`}>\n\t\t{this.displayModal()}\n\t\t<h2 className={`header ${this.state.css}`}>{this.props.type}</h2>\n\t\t{this.typeOfSensor()}\n\t\t<div className={'button-menu'}>\n\t\t<Button clickMethod={this.modalOn} disabled={false}>Show Historical Data</Button>\n\t\t</div>\n\t\t</div>\n\t)\n    }\n}\n\nexport default Sensor\n","import React, { Component } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css'\nimport Sensor from './components/sensor/sensor'\nimport openSocket from 'socket.io-client'\n\nconst ip = \"https://agiledevbear.ddns.net:8080\"\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n\n\t/* Initialise the state of the App */\n        this.state = {\n            socket: openSocket(ip),\n            light: {\n                value: 0,\n                threshold: 200,\n            },\n\t    temperature: {\n\t\tvalue: 20.00,\n\t\tminThreshold: 25.00,\n\t\tmaxThreshold: 27.00\n\t    }\n        }\n\n\t/* Tunnel functionality. Handle MQTT data in here */\n        this.state.socket.on('tunnel', data => {\n\t    let jsonData = JSON.parse(data)\n\t    if(jsonData.topic === '302CEM/bear/sensor_light/sensor_0'){\n\t\tlet newJSON = this.state.light\n\t\tnewJSON.value = jsonData.message\n\t\tthis.setState({light: newJSON})\n\t    }\n\t    if(jsonData.topic === '302CEM/bear/sensor_temperature/sensor_1'){\n\t\tlet newJSON = this.state.temperature\n\t\tnewJSON.value = jsonData.message\n\t\tthis.setState({temperature: newJSON})\n\t    }\n\t})\n\n\t/* Function binds */\n\tthis.incrementThreshold = this.incrementThreshold.bind(this)\n\tthis.decrementThreshold = this.decrementThreshold.bind(this)\n\tthis.incrementMinTempThreshold = this.incrementMinTempThreshold.bind(this)\n\tthis.decrementMinTempThreshold = this.decrementMinTempThreshold.bind(this)\n\tthis.incrementMaxTempThreshold = this.incrementMaxTempThreshold.bind(this)\n\tthis.decrementMaxTempThreshold = this.decrementMaxTempThreshold.bind(this)\n\tthis.getHistory = this.getHistory.bind(this)\n        this.getLightThreshold = this.getLightThreshold.bind(this)\n        this.setLightThreshold = this.setLightThreshold.bind(this)\n\tthis.getMinTempThreshold = this.getMinTempThreshold.bind(this)\n        this.setMinTempThreshold = this.setMinTempThreshold.bind(this)\n\tthis.getMaxTempThreshold = this.getMaxTempThreshold.bind(this)\n        this.setMaxTempThreshold = this.setMaxTempThreshold.bind(this)\n    }\n    incrementThreshold(){\n\t/**\n         * @description Increment the current light threshold by 1000\n         */\n\tlet newJSON = this.state.light\n\tnewJSON.threshold = newJSON.threshold + 5\n        this.setLightThreshold(newJSON.threshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({light: newJSON})\n            }\n        })\n    }\n    decrementThreshold(){\n\t/**\n         * @description Decrement the current light threshold by 1000\n         */\n\tlet newJSON = this.state.light\n\tnewJSON.threshold = newJSON.threshold - 5\n        this.setLightThreshold(newJSON.threshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({light: newJSON})\n            }\n        })\n    }\n    incrementMinTempThreshold(){\n\t/**\n         * @description Increment the current min temp threshold by 0.5\n         */\n\tlet newJSON = this.state.temperature\n\tnewJSON.minThreshold = newJSON.minThreshold + 0.5\n        this.setMinTempThreshold(newJSON.minThreshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({temperature: newJSON})\n            }\n        })\n    }\n    decrementMinTempThreshold(){\n\t/**\n         * @description Decrement the current min temp threshold by 0.5\n         */\n\tlet newJSON = this.state.temperature\n\tnewJSON.minThreshold = newJSON.minThreshold - 0.5\n        this.setMinTempThreshold(newJSON.minThreshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({temperature: newJSON})\n            }\n        })\n    }\n    incrementMaxTempThreshold(){\n\t/**\n         * @description Increment the current max temp threshold by 0.5\n         */\n\tlet newJSON = this.state.temperature\n\tnewJSON.maxThreshold = newJSON.maxThreshold + 0.5\n        this.setMaxTempThreshold(newJSON.maxThreshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({temperature: newJSON})\n            }\n        })\n    }\n    decrementMaxTempThreshold(){\n\t/**\n         * @description Decrement the current max temp threshold by 0.5\n         */\n\tlet newJSON = this.state.temperature\n\tnewJSON.maxThreshold = newJSON.maxThreshold - 0.5\n        this.setMaxTempThreshold(newJSON.maxThreshold, (err) => {\n            if (err) {\n                toast.error(err.message)\n            } else {\n                this.setState({temperature: newJSON})\n            }\n        })\n    }\n    /**\n     * @description Get the historical sensor data from the api\n     * @param {String} type - The type of a sensor in the api\n     * @param {Function} callback - Callback with the signature (err, history)\n     */\n    async getHistory(type, callback) {\n        try {\n            const response = await fetch(`${ip}/api/sensors/history/byType?type=${type}`, {\n                method: 'get'\n            })\n\n            const json = await response.json()\n\n            if (!response.ok) {\n\t\tconsole.log('wtf')\n                throw new Error(`Error: ${json.error}`)\n            }\n\n            callback(null, json)\n        } catch (err) {\n            callback(err)\n        }\n    }\n    /**\n     * @description Get the current light threshold value from the api\n     * @param {Function} callback - Callback with the signature (err, threshold)\n     */\n    async getLightThreshold(callback) {\n        try {\n            const response = await fetch(`${ip}/api/sensors/light/threshold?id=0`, {\n                method: 'get'\n            })\n\n            const json = await response.json()\n\n            if (!response.ok) {\n                throw new Error(`Error: ${json.error}`)\n            }\n\n            callback(null, json.threshold)\n        } catch (err) {\n            callback(err)\n        }\n    }\n\n    /**\n     * @description Set a new light threshold value using the api\n     * @param {Integer} threshold - The new threshold value\n     * @param {Function} callback - Callback with the signature (err)\n     */\n    async setLightThreshold(threshold, callback) {\n        try {\n            const response = await fetch(`${ip}/api/sensors/light/threshold`, {\n                body: JSON.stringify({\n                    id: 0,\n                    threshold: threshold\n                }),\n                headers: {'content-type': 'application/json'},\n                method: 'post'\n\t    })\n\n            if (!response.ok) {\n                const json = await response.json()\n                throw new Error(`Error: ${json.error}`)\n            }\n\n            callback(null)\n        } catch (err) {\n            callback(err)\n        }\n    }\n    /**\n     * @description Get the current min temp threshold value from the api\n     * @param {Function} callback - Callback with the signature (err, threshold)\n     */\n    async getMinTempThreshold(callback) {\n        try {\n            const response = await fetch(`${ip}/api/sensors/temperature/threshold/min?id=1`, {\n                method: 'get'\n            })\n\n            const json = await response.json()\n\n            if (!response.ok) {\n                throw new Error(`Error: ${json.error}`)\n            }\n\n            callback(null, json.threshold)\n        } catch (err) {\n            callback(err)\n        }\n    }\n\n    /**\n     * @description Set a new min temp threshold value using the api\n     * @param {Integer} threshold - The new threshold value\n     * @param {Function} callback - Callback with the signature (err)\n     */\n    async setMinTempThreshold(threshold, callback) {\n        try {\n            const response = await fetch(`${ip}/api/sensors/temperature/threshold/min`, {\n                body: JSON.stringify({\n                    id: 1,\n                    threshold: threshold\n                }),\n                headers: {'content-type': 'application/json'},\n                method: 'post'\n\t    })\n\n            if (!response.ok) {\n                const json = await response.json()\n                throw new Error(`Error: ${json.error}`)\n            }\n\n            callback(null)\n        } catch (error) {\n            callback(error)\n        }\n    }\n    /**\n     * @description Get the current max temp threshold value from the api\n     * @param {Function} callback - Callback with the signature (err, threshold)\n     */\n    async getMaxTempThreshold(callback) {\n        try {\n            const response = await fetch(`${ip}/api/sensors/temperature/threshold/max?id=1`, {\n                method: 'get'\n            })\n\n            const json = await response.json()\n\n            if (!response.ok) {\n                throw new Error(`Error: ${json.error}`)\n            }\n\n            callback(null, json.threshold)\n        } catch (err) {\n            callback(err)\n        }\n    }\n\n    /**\n     * @description Set a new max temp threshold value using the api\n     * @param {Integer} threshold - The new threshold value\n     * @param {Function} callback - Callback with the signature (err)\n     */\n    async setMaxTempThreshold(threshold, callback) {\n        try {\n            const response = await fetch(`${ip}/api/sensors/temperature/threshold/max`, {\n                body: JSON.stringify({\n                    id: 1,\n                    threshold: threshold\n                }),\n                headers: {'content-type': 'application/json'},\n                method: 'post'\n\t    })\n\n            if (!response.ok) {\n                const json = await response.json()\n                throw new Error(`Error: ${json.error}`)\n            }\n\n            callback(null)\n        } catch (err) {\n            callback(err)\n        }\n    }\n    render() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t<ToastContainer position=\"top-center\" />\n\t\t<div className=\"sensorArray\">\n\t\t<Sensor type=\"Light\" threshold={this.state.light.threshold} incrementThreshold={this.incrementThreshold} decrementThreshold={this.decrementThreshold} getHistory={this.getHistory}>{this.state.light.value}</Sensor>\n\t\t<Sensor type=\"Temperature\" minTempThreshold={this.state.temperature.minThreshold} maxTempThreshold={this.state.temperature.maxThreshold} incrementMinTempThreshold={this.incrementMinTempThreshold} decrementMinTempThreshold={this.decrementMinTempThreshold} incrementMaxTempThreshold={this.incrementMaxTempThreshold} decrementMaxTempThreshold={this.decrementMaxTempThreshold} getHistory={this.getHistory}>{this.state.temperature.value}</Sensor>\n\t\t</div>\n\t\t</div>\n\t)\n    }\n    componentDidMount(){\n\t/* Any initialization functions that request from the Remote API (e.g. getLightThreshold) MUST be called in here and NOT at render */\n\tthis.getLightThreshold((err, threshold) => {\n\t    if(err){\n\t\ttoast.error(err.message)\n\t    } else {\n\t\tlet newJSON = this.state.light\n\t\tnewJSON.threshold = threshold\n\t\tthis.setState({light: newJSON})\n\t    }\n\t})\n\tthis.getMinTempThreshold((err, threshold) => {\n\t    if(err){\n\t\ttoast.error(err.message)\n\t    } else {\n\t\tlet newJSON = this.state.temperature\n\t\tnewJSON.minThreshold = threshold\n\t\tthis.setState({temperature: newJSON})\n\t    }\n\t})\n\tthis.getMaxTempThreshold((err, threshold) => {\n\t    if(err){\n\t\ttoast.error(err.message)\n\t    } else {\n\t\tlet newJSON = this.state.temperature\n\t\tnewJSON.maxThreshold = threshold\n\t\tthis.setState({temperature: newJSON})\n\t    }\n\t})\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}